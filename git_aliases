# Copyright (C) 2012 Andrea Valle
#   
# This file is part of git4f.
# 
# git4f is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# git4f is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with git4f.  If not, see <http://www.gnu.org/licenses/>.

[alias]
  #get/set integration branch
  intbr       = "!f() { [ $# -eq 0 ] && { git config 4f.intbr && exit $? || exit $? ;}; \
                        [ $# -eq 1 ] &&                                                 \
                          {                                                             \
                            $( git show-ref --quiet --verify -- \"refs/heads/$1\" ) &&  \
                                { git config 4f.intbr $1 && exit $? || exit $? ;}   ||  \
                                { echo Not a valid branch refs/heads/$1 >&2 && exit 1 ;};   \
                          };                                                            \
                        [ $# -gt 1 ] && { echo Too many parameters >&2 && exit 1 ;};        \
                      }; f"

  #switch aliases
  chk-intbr     = "!git intbr 2>1 1>/dev/null && git checkout $(git intbr)"
  chk-back    = checkout @{-1}

  #feature branch mgt
  ftrbr-start = "!f() { [ $# -ne 1 ] && echo \"Missing br name\" >&2 && exit 1; \
                         br_int=$(git intbr) || { echo \"Integration branch not set\" >&2 && exit 1 ;}; \
                         br_ftr_pre=$(git config --get 4f.ftrbr-prefix) 2>/dev/null; \
                         git checkout $br_int             && \
                         echo \"Pulling $(git intbr)\"    && \
                         git pull                         && \
                         echo \"Creating new ftr branch\" && \
                         git checkout -b ${br_ftr_pre}$1 \
                       ;}; f"

  ftrbr-sidepull = !git intbr 2>1 1>/dev/null || (echo Integration branch not set >&2 && exit 1) && \
                     git chk-intbr   && \
                     git pull     && \
                     git chk-back  && \
                     echo Merging $(git intbr) into current branch && \
                     git merge $(git config --get 4f.ftrbr-pull-merge-opt) $(git intbr)

  ftrbr-integrate = "!f() { br_start=$(git symbolic-ref -q HEAD) || { echo Cannot exec from detached-head >&2 && exit 1 ;}; \
                             git intbr 2>1 1>/dev/null           || { echo Integration branch not set >&2 && exit 1 ;}; \
                             git chk-intbr                            && \
                             echo \"Pulling $(git intbr)\"            && \
                             git pull                                 && \
                             echo Merging $br_start into $(git intbr) && \
                             git merge $(git config --get 4f.ftrbr-push-merge-opt) $br_start \
                            ;}; f"

  ftrbr-sidepush = !git ftrbr-integrate && echo \"Pushing $(git intbr) onto origin\" && git push origin $(git intbr)

  ftrbr-done     = !git ftrbr-sidepush && git branch -d $(git rev-parse --symbolic-full-name --abbrev-ref @{-1})

  ftrbr-rebase   = !git chk-intbr                                                   && \
                    git pull                                                        && \
                    git chk-back                                                    && \
                    echo \"Rebasing $(git symbolic-ref -q HEAD) onto $(git intbr)\" && \
                    git rebase $(git intbr)


#configurations
#[4f]
#  intbr                = master
#  ftrbr-prefix         = ftr/
#  ftrbr-pull-merge-opt = --no-ff
#  ftrbr-push-merge-opt = 
